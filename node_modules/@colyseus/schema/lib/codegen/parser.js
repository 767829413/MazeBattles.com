"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var fs_1 = require("fs");
var types_1 = require("./types");
var currentClass;
var currentProperty;
function inspectNode(node, classes) {
    switch (node.kind) {
        case ts.SyntaxKind.ClassDeclaration:
            currentClass = new types_1.Class();
            classes.push(currentClass);
            break;
        case ts.SyntaxKind.PropertyDeclaration:
            break;
        case ts.SyntaxKind.Identifier:
            if (node.getText() === "type" && node.parent.kind !== ts.SyntaxKind.ImportSpecifier) {
                var prop = node.parent.parent.parent;
                var typeDecorator = node.parent.parent.parent.decorators.find((function (decorator) {
                    return decorator.expression.expression.escapedText === "type";
                })).expression;
                currentProperty = new types_1.Property();
                currentProperty.name = prop.name.escapedText;
                currentClass.properties.push(currentProperty);
                var typeArgument = typeDecorator.arguments[0];
                if (ts.isIdentifier(typeArgument)) {
                    currentProperty.type = "ref";
                    currentProperty.childType = typeArgument.text;
                }
                else if (typeArgument.kind == ts.SyntaxKind.ObjectLiteralExpression) {
                    currentProperty.type = "map";
                    currentProperty.childType = typeArgument.properties[0].initializer.text;
                }
                else if (typeArgument.kind == ts.SyntaxKind.ArrayLiteralExpression) {
                    currentProperty.type = "array";
                    currentProperty.childType = typeArgument.elements[0].text;
                }
                else {
                    currentProperty.type = typeArgument.text;
                }
            }
            if (node.parent.kind === ts.SyntaxKind.ClassDeclaration) {
                currentClass.name = node.getText();
            }
            break;
    }
    ts.forEachChild(node, function (n) { return inspectNode(n, classes); });
}
function parseFiles(fileNames) {
    var classes = [];
    fileNames.forEach(function (fileName) {
        var sourceFile = ts.createSourceFile(fileName, fs_1.readFileSync(fileName).toString(), ts.ScriptTarget.ES2018, true);
        inspectNode(sourceFile, classes);
    });
    return classes.filter(function (klass) { return klass.properties.length > 0; });
}
exports.parseFiles = parseFiles;
