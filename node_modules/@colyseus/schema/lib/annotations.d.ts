import * as decode from "./encoding/decode";
import { ChangeTree } from './ChangeTree';
import { ArraySchema } from './types/ArraySchema';
/**
 * Data types
 */
export declare type PrimitiveType = "string" | "number" | "boolean" | "int8" | "uint8" | "int16" | "uint16" | "int32" | "uint32" | "int64" | "uint64" | "float32" | "float64" | typeof Schema;
export declare type DefinitionType = (PrimitiveType | PrimitiveType[] | {
    map: PrimitiveType;
});
export declare type Definition = {
    [field: string]: DefinitionType;
};
export declare type FilterCallback = (this: Schema, client: Client, instance: Schema, root?: Schema) => boolean;
export declare type Client = {
    sessionId: string;
} & any;
export interface DataChange<T = any> {
    field: string;
    value: T;
    previousValue: T;
}
/**
 * Schema encoder / decoder
 */
export declare abstract class Schema {
    static _schema: Definition;
    static _indexes: {
        [field: string]: number;
    };
    static _filters: {
        [field: string]: FilterCallback;
    };
    static _descriptors: PropertyDescriptorMap & ThisType<any>;
    protected $changes: ChangeTree;
    onChange?(changes: DataChange[]): any;
    onRemove?(): any;
    constructor(...args: any[]);
    readonly _schema: Definition;
    readonly _descriptors: PropertyDescriptorMap & ThisType<any>;
    readonly _indexes: {
        [field: string]: number;
    };
    readonly _filters: {
        [field: string]: FilterCallback;
    };
    readonly $changed: boolean;
    decode(bytes: any, it?: decode.Iterator): this;
    encode(root?: Schema, encodeAll?: boolean, client?: Client): any[];
    encodeFiltered(client: Client): any[];
    encodeAll(): any[];
    encodeAllFiltered(client: Client): any[];
    toJSON(): {};
}
/**
 * Reflection
 */
export declare class ReflectionField extends Schema {
    name: string;
    type: string;
    referencedType: number;
}
export declare class ReflectionType extends Schema {
    id: number;
    fields: ArraySchema<ReflectionField>;
}
export declare class Reflection extends Schema {
    types: ArraySchema<ReflectionType>;
    static encode(instance: Schema): any[];
    static decode(bytes: number[]): Schema;
}
/**
 * `@type()` decorator for proxies
 */
export declare function type(type: DefinitionType): PropertyDecorator;
/**
 * `@filter()` decorator for defining data filters per client
 */
export declare function filter(cb: FilterCallback): PropertyDecorator;
